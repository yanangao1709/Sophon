# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#     Author: Yanan Gao                                       #
#       Date: 13-06-2023                                      #
#      Goals: topology data for TOQN                          #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# 量子网络模型1
import numpy as np
from Config import QNConfig

# request pool
# Attention!! Networkx表示的拓扑里，节点ID没有0点
REQUESTSET = [[7, 8], [15, 5], [6, 5], [16, 4], [7, 13], [13, 14], [18, 9], [12, 18], [1, 11], [18, 16],
                [15, 18], [11, 18], [1, 11], [10, 18], [9, 17], [3, 7], [16, 12], [4, 10], [15, 18], [7, 14]]
# REQUESTSET = [[7, 8], [15, 5], [6, 5], [16, 4], [7, 13],
#               [13, 14], [18, 9], [12, 18], [1, 11], [18, 16],
#               [15, 18], [11, 18], [1, 11], [10, 18], [9, 17]]
# REQUESTSET = [[7, 8], [15, 5], [6, 5], [16, 4], [7, 13],
#               [13, 14], [18, 9], [12, 18], [1, 11], [18, 16]]
# REQUESTSET = [[7, 8], [15, 5], [6, 5], [16, 4], [7, 13]]


# the volumn of each request
D_VOLUMN = [12, 16, 14, 20, 10, 12, 13, 20, 14, 20, 16, 13, 11, 20, 17, 16, 12, 20, 16, 17]
# D_VOLUMN = [12, 16, 14, 20, 10, 12, 13, 20, 14, 20, 16, 13, 11, 20, 17]
# D_VOLUMN = [12, 16, 14, 20, 10, 12, 13, 20, 14, 20]
# D_VOLUMN = [12, 16, 14, 20, 10]

# candidate_route_num routes of each request
ROUTES = [[[7, 5, 8], [7, 6, 2, 5, 8], [7, 5, 4, 8]], [[15, 6, 7, 5], [15, 2, 5], [15, 6, 2, 5]], [[6, 7, 5], [6, 2, 5], [6, 14, 7, 5]], [[16, 11, 10, 9, 4], [16, 11, 5, 4], [16, 13, 11, 10, 9, 4]], [[7, 11, 13], [7, 14, 13], [7, 6, 14, 13]], [[13, 14], [13, 11, 7, 14], [13, 11, 7, 6, 14]], [[18, 8, 9], [18, 12, 10, 9], [18, 12, 11, 10, 9]], [[12, 18], [12, 10, 9, 8, 18], [12, 16, 17, 18]], [[1, 2, 6, 7, 11], [1, 3, 5, 11], [1, 3, 5, 7, 11]], [[18, 12, 16], [18, 12, 11, 16], [18, 12, 11, 13, 16]], [[15, 6, 7, 11, 12, 18], [15, 14, 7, 11, 12, 18], [15, 14, 13, 11, 12, 18]], [[11, 12, 18], [11, 10, 12, 18], [11, 16, 12, 18]], [[1, 2, 6, 7, 11], [1, 3, 5, 11], [1, 3, 5, 7, 11]], [[10, 12, 18], [10, 11, 12, 18], [10, 9, 8, 18]], [[9, 10, 11, 16, 17], [9, 8, 18, 17], [9, 10, 12, 18, 17]], [[3, 5, 7], [3, 6, 7], [3, 1, 2, 6, 7]], [[16, 12], [16, 11, 12], [16, 13, 11, 12]], [[4, 9, 10], [4, 8, 9, 10], [4, 5, 8, 9, 10]], [[15, 6, 7, 11, 12, 18], [15, 14, 7, 11, 12, 18], [15, 14, 13, 11, 12, 18]], [[7, 14], [7, 6, 14], [7, 6, 15, 14]]]
# ROUTES = [[[7, 5, 8], [7, 6, 2, 5, 8], [7, 5, 4, 8]], [[15, 6, 7, 5], [15, 2, 5], [15, 6, 2, 5]], [[6, 7, 5], [6, 2, 5], [6, 14, 7, 5]], [[16, 11, 10, 9, 4], [16, 11, 5, 4], [16, 13, 11, 10, 9, 4]], [[7, 11, 13], [7, 14, 13], [7, 6, 14, 13]], [[13, 14], [13, 11, 7, 14], [13, 11, 7, 6, 14]], [[18, 8, 9], [18, 12, 10, 9], [18, 12, 11, 10, 9]], [[12, 18], [12, 10, 9, 8, 18], [12, 16, 17, 18]], [[1, 2, 6, 7, 11], [1, 3, 5, 11], [1, 3, 5, 7, 11]], [[18, 12, 16], [18, 12, 11, 16], [18, 12, 11, 13, 16]], [[15, 6, 7, 11, 12, 18], [15, 14, 7, 11, 12, 18], [15, 14, 13, 11, 12, 18]], [[11, 12, 18], [11, 10, 12, 18], [11, 16, 12, 18]], [[1, 2, 6, 7, 11], [1, 3, 5, 11], [1, 3, 5, 7, 11]], [[10, 12, 18], [10, 11, 12, 18], [10, 9, 8, 18]], [[9, 10, 11, 16, 17], [9, 8, 18, 17], [9, 10, 12, 18, 17]]]
# ROUTES = [[[7, 5, 8], [7, 6, 2, 5, 8], [7, 5, 4, 8]], [[15, 6, 7, 5], [15, 2, 5], [15, 6, 2, 5]], [[6, 7, 5], [6, 2, 5], [6, 14, 7, 5]], [[16, 11, 10, 9, 4], [16, 11, 5, 4], [16, 13, 11, 10, 9, 4]], [[7, 11, 13], [7, 14, 13], [7, 6, 14, 13]], [[13, 14], [13, 11, 7, 14], [13, 11, 7, 6, 14]], [[18, 8, 9], [18, 12, 10, 9], [18, 12, 11, 10, 9]], [[12, 18], [12, 10, 9, 8, 18], [12, 16, 17, 18]], [[1, 2, 6, 7, 11], [1, 3, 5, 11], [1, 3, 5, 7, 11]], [[18, 12, 16], [18, 12, 11, 16], [18, 12, 11, 13, 16]]]
# ROUTES = [[[7, 5, 8], [7, 6, 2, 5, 8], [7, 5, 4, 8]],
#           [[15, 6, 7, 5], [15, 2, 5], [15, 6, 2, 5]],
#           [[6, 7, 5], [6, 2, 5], [6, 14, 7, 5]],
#           [[16, 11, 10, 9, 4], [16, 11, 5, 4], [16, 13, 11, 10, 9, 4]],
#           [[7, 11, 13], [7, 14, 13], [7, 6, 14, 13]]]

ROUTES_LEN = [[8, 15, 15], [10, 11, 11], [7, 8, 10], [17, 18, 19], [8, 10, 11], [6, 12, 13], [13, 14, 17], [5, 22, 24], [14, 15, 16], [12, 14, 16], [20, 22, 22], [9, 16, 17], [14, 15, 16], [11, 14, 16], [21, 22, 23], [8, 10, 12], [7, 9, 11], [7, 11, 14], [20, 22, 22], [4, 5, 10]]
# ROUTES_LEN = [[8, 15, 15], [10, 11, 11], [7, 8, 10], [17, 18, 19], [8, 10, 11], [6, 12, 13], [13, 14, 17], [5, 22, 24], [14, 15, 16], [12, 14, 16], [20, 22, 22], [9, 16, 17], [14, 15, 16], [11, 14, 16], [21, 22, 23]]
# ROUTES_LEN = [[8, 15, 15], [10, 11, 11], [7, 8, 10], [17, 18, 19], [8, 10, 11], [6, 12, 13], [13, 14, 17], [5, 22, 24], [14, 15, 16], [12, 14, 16]]
# ROUTES_LEN = [[8, 15, 15], [10, 11, 11], [7, 8, 10], [17, 18, 19], [8, 10, 11]]

# 每个链接的物理长度
LINK_LENS = [
    [0, 4, 3, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [4, 0, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0],
    [3, 0, 0, 0, 4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 5, 0, 0, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 6, 4, 5, 0, 0, 4, 4, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0],
    [0, 0, 0, 0, 4, 3, 0, 0, 0, 0, 5, 0, 0, 4, 0, 0, 0, 0],
    [0, 0, 0, 6, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 11],
    [0, 0, 0, 4, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 6, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 8, 0, 5, 0, 0, 5, 0, 4, 3, 0, 0, 5, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 0, 0, 0, 0, 7, 0, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 6, 0, 4, 0, 0],
    [0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 0],
    [0, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 7, 4, 0, 0, 0, 8, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 9],
    [0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 5, 0, 0, 0, 0, 9, 0]
]

# r 请求的 k路径 有没有经过这个点
# 生成
# H_RKN = [[[0] * QNConfig.node_num for i in range(QNConfig.candidate_route_num)] for j in range(len(REQUESTSET))]
# for r in range(len(REQUESTSET)):
#     for k,p in enumerate(ROUTES[r]):
#         for n in range(len(p)):
#             H_RKN[r][k][p[n]-1] = 1
# print(H_RKN)

H_RKN = [[[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1]], [[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1]], [[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1]], [[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1]], [[0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0]]]
# H_RKN = [[[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1]], [[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1]], [[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1]], [[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1]]]
# H_RKN = [[[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1]], [[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1]]]
# H_RKN = [[[0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0]], [[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]]

# r的k候选路径的跳数
ROUTES_HOPS = [[3, 5, 4], [4, 3, 4], [3, 3, 4], [5, 4, 6], [3, 3, 4], [2, 4, 5], [3, 4, 5], [2, 5, 4], [5, 4, 5], [3, 4, 5], [6, 6, 6], [3, 4, 4], [5, 4, 5], [3, 4, 4], [5, 4, 5], [3, 3, 5], [2, 3, 4], [3, 4, 5], [6, 6, 6], [2, 3, 4]]
# ROUTES_HOPS = [[3, 5, 4], [4, 3, 4], [3, 3, 4], [5, 4, 6], [3, 3, 4], [2, 4, 5], [3, 4, 5], [2, 5, 4], [5, 4, 5], [3, 4, 5], [6, 6, 6], [3, 4, 4], [5, 4, 5], [3, 4, 4], [5, 4, 5]]
# ROUTES_HOPS = [[3, 5, 4], [4, 3, 4], [3, 3, 4], [5, 4, 6], [3, 3, 4], [2, 4, 5], [3, 4, 5], [2, 5, 4], [5, 4, 5], [3, 4, 5]]
# ROUTES_HOPS = [[3, 5, 4], [4, 3, 4], [3, 3, 4], [5, 4, 6], [3, 3, 4]]

# node capacity
# for exp in range(10, 31):
#     NODE_CPA = []
#     for n in range(QNConfig.node_num):
#         while True:
#             # 从正态分布中生成一个数
#             num = np.random.normal(exp, 5)
#             # 如果该数在 [a, b] 范围内，返回该数
#             if 5 <= num <= 35:
#                 break
#         NODE_CPA.append(round(num))
#     print(NODE_CPA)

NODE_CPA = [12, 24, 20, 22, 10, 9, 24, 19, 14, 16, 12, 14, 10, 26, 18, 13, 16, 20]
# with the expectation of 10-30
# NODE_CPA = [15, 18, 6, 14, 11, 9, 11, 12, 13, 12, 9, 14, 13, 12, 20, 12, 13, 7]
# NODE_CPA = [16, 15, 14, 15, 10, 12, 6, 7, 10, 6, 17, 10, 7, 13, 18, 9, 14, 14]
# NODE_CPA = [18, 15, 10, 14, 15, 17, 9, 13, 12, 16, 15, 17, 7, 12, 9, 10, 12, 14]
# NODE_CPA = [14, 13, 14, 11, 20, 6, 13, 17, 17, 17, 8, 10, 13, 12, 14, 17, 14, 9]
# NODE_CPA = [16, 10, 15, 20, 11, 12, 17, 12, 21, 13, 5, 9, 18, 18, 10, 15, 20, 13]
# NODE_CPA = [14, 16, 18, 6, 11, 17, 23, 12, 10, 28, 12, 16, 20, 15, 12, 21, 20, 18]
# NODE_CPA = [7, 11, 21, 13, 6, 24, 19, 17, 8, 12, 16, 22, 13, 19, 6, 14, 20, 22]
# NODE_CPA = [27, 16, 10, 23, 17, 24, 24, 20, 17, 12, 26, 18, 15, 24, 16, 17, 10, 17]
# NODE_CPA = [20, 12, 26, 16, 17, 13, 25, 20, 17, 25, 26, 16, 16, 14, 22, 11, 22, 23]
# NODE_CPA = [16, 23, 20, 18, 24, 14, 17, 14, 29, 19, 16, 18, 18, 15, 18, 20, 15, 7]
# NODE_CPA = [21, 21, 25, 23, 17, 12, 24, 21, 20, 23, 22, 13, 17, 21, 25, 13, 22, 11]
# NODE_CPA = [19, 13, 20, 17, 21, 14, 15, 24, 19, 23, 15, 22, 26, 13, 21, 19, 30, 24]
# NODE_CPA = [29, 27, 27, 21, 15, 19, 14, 20, 25, 23, 28, 29, 31, 17, 27, 20, 21, 16]
# NODE_CPA = [19, 16, 20, 27, 19, 22, 28, 25, 25, 29, 26, 16, 30, 22, 30, 25, 24, 27]
# NODE_CPA = [21, 21, 22, 33, 17, 17, 20, 27, 26, 21, 30, 16, 21, 20, 23, 28, 9, 26]
# NODE_CPA = [31, 23, 21, 24, 26, 18, 34, 16, 28, 33, 16, 24, 22, 32, 25, 23, 32, 25]
# NODE_CPA = [24, 24, 24, 34, 22, 20, 28, 35, 19, 19, 25, 29, 21, 24, 26, 23, 25, 22]
# NODE_CPA = [32, 24, 29, 29, 24, 32, 27, 26, 29, 24, 26, 29, 25, 25, 22, 28, 29, 26]
# NODE_CPA = [26, 24, 33, 31, 32, 33, 27, 33, 23, 27, 32, 20, 29, 32, 23, 30, 34, 30]
# NODE_CPA = [34, 28, 34, 27, 26, 31, 30, 29, 31, 26, 32, 23, 26, 24, 17, 31, 27, 34]
# NODE_CPA = [27, 29, 35, 23, 26, 29, 29, 27, 29, 29, 26, 33, 29, 31, 31, 22, 33, 32]
