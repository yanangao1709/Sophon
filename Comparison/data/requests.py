# -----------------------------------生成请求-----------------------------------
from Config import QNConfig
from QNEnv.QNModel import LINK_LENS
# import random
#
# def generate_a_request():
#     s_r = random.randint(0, QNConfig.node_num)
#     if s_r != QNConfig.node_num:
#         s_r += 1
#     d_r = random.randint(0, QNConfig.node_num)
#     if d_r != QNConfig.node_num:
#         d_r += 1
#     if s_r == d_r:
#         s_r = 1
#         d_r = 11
#     return [s_r, d_r]
#
#
# data_volumes = []
# all_requests = []
# for i in range(100):
#     all_requests.append(generate_a_request())
#     data_volumes.append(random.randint(QNConfig.volume_lower, QNConfig.volume_upper))
# print(data_volumes)
# print(all_requests)
DATA_VOLUMES = [12, 16, 14, 20, 10, 12, 13, 20, 14, 20, 16, 13, 11, 20, 17, 16, 12, 20, 16, 17, 17, 17, 18, 20, 14, 14, 12, 12, 19, 14, 17, 18, 12, 16, 13, 10, 20, 17, 14, 12, 17, 20, 17, 12, 18, 20, 20, 17, 12, 12, 18, 10, 16, 10, 18, 16, 18, 14, 16, 10, 16, 18, 19, 12, 13, 16, 12, 20, 18, 20, 10, 19, 12, 20, 10, 14, 16, 16, 13, 10, 16, 16, 15, 13, 20, 20, 19, 11, 13, 11, 20, 10, 13, 18, 20, 10, 15, 19, 15, 14, 20, 10, 16, 20, 15, 17, 19, 14, 19, 17, 12, 12, 18, 17, 19, 11, 17, 10, 10, 14, 20, 11, 20, 13, 18, 19, 11, 12, 10, 20, 20, 11, 15, 13, 18, 18, 10, 18, 20, 15, 18, 20, 16, 19, 17, 19, 16, 19, 16, 14, 11, 17, 10, 13, 19, 13, 13, 15, 16, 10, 15, 19, 10, 10, 19, 14, 13, 20, 14, 10, 17, 18, 13, 12, 10, 13, 12, 16, 20, 14, 11, 13, 11, 10, 14, 18, 18, 16, 11, 15, 20, 16, 18, 18, 16, 15, 20, 13, 15, 19]
ALL_REQUESTS = [[7, 8], [15, 5], [6, 5], [16, 4], [7, 13], [13, 14], [18, 9], [12, 18], [1, 11], [18, 16], [15, 18], [11, 18], [1, 11], [10, 18], [9, 17], [3, 7], [16, 12], [4, 10], [15, 18], [7, 14], [18, 10], [6, 4], [8, 18], [1, 11], [4, 2], [3, 17], [6, 4], [5, 17], [18, 13], [13, 2], [10, 2], [18, 15], [2, 6], [1, 16], [12, 18], [12, 3], [10, 4], [13, 5], [1, 16], [18, 10], [10, 17], [7, 11], [2, 15], [12, 16], [1, 11], [1, 17], [18, 5], [11, 13], [2, 6], [1, 5], [16, 2], [18, 13], [1, 10], [1, 6], [2, 17], [7, 1], [13, 9], [5, 17], [10, 18], [13, 18], [1, 9], [5, 2], [3, 10], [6, 15], [15, 9], [11, 13], [17, 13], [10, 18], [11, 2], [18, 3], [1, 11], [2, 7], [11, 6], [13, 16], [6, 18], [12, 13], [15, 14], [1, 11], [17, 3], [14, 1], [4, 13], [18, 9], [8, 4], [11, 16], [16, 2], [10, 8], [13, 6], [14, 17], [12, 11], [18, 8], [5, 6], [13, 6], [17, 18], [3, 7], [15, 18], [14, 9], [7, 3], [11, 6], [14, 18], [1, 11],
                [1, 11], [9, 1], [6, 17], [3, 16], [3, 18], [9, 4], [11, 6], [11, 13], [3, 13], [11, 18], [1, 14], [10, 14], [1, 11], [7, 11], [15, 9], [1, 13], [3, 4], [15, 2], [15, 2], [17, 2], [9, 8], [2, 13], [4, 2], [3, 9], [1, 11], [18, 4], [1, 11], [9, 5], [18, 8], [16, 14], [13, 6], [15, 3], [1, 11], [11, 14], [6, 12], [5, 11], [18, 7], [17, 16], [16, 11], [17, 14], [16, 13], [1, 8], [13, 9], [1, 18], [10, 16], [1, 11], [17, 9], [8, 13], [14, 12], [17, 4], [11, 18], [5, 11], [18, 10], [1, 11], [18, 4], [1, 9], [1, 14], [18, 9], [1, 10], [17, 3], [16, 18], [8, 9], [14, 10], [9, 14], [12, 6], [4, 11], [6, 5], [10, 6], [8, 4], [11, 1], [9, 18], [1, 11], [13, 18], [13, 18], [16, 1], [6, 7], [3, 18], [1, 6], [18, 13], [18, 1], [9, 4], [4, 10], [1, 11], [10, 9], [10, 5], [6, 14], [5, 17], [2, 6], [7, 14], [5, 3], [12, 18], [10, 7], [6, 11], [18, 3], [17, 18], [16, 6], [6, 1], [5, 17], [1, 10], [15, 10]]
NODE_CPA = [12, 24, 20, 22, 10, 9, 24, 19, 14, 16, 12, 14, 10, 26, 18, 13, 16, 20]
interval = 10
candidate_route_num_com = 3
batch_len = 5   # requests_pool_len

def get_routes_len(candidate_routes, routes_hops):
    routes_len = []
    for i in range(batch_len):
        r_len = []
        for j in range(candidate_route_num_com):
            l = 0
            rt = candidate_routes[i][j]
            for h in range(routes_hops[i][j]):
                if h==0:
                    continue
                l += LINK_LENS[rt[h-1]-1][rt[h]-1]
            r_len.append(l)
        routes_len.append(r_len)
    return routes_len

def get_H_RKN(requests, candidate_routes):
    H_RKN = [[[0] * QNConfig.node_num for i in range(candidate_route_num_com)] for j in range(batch_len)]
    for r in range(len(requests)):
        for k,p in enumerate(candidate_routes[r]):
            for n in range(len(p)):
                H_RKN[r][k][p[n]-1] = 1
    return H_RKN

def get_routes_hops(requests, candidate_routes):
    routes_hops = []
    for r in range(len(requests)):
        rl = []
        for cr in range(candidate_route_num_com):
            rl.append(len(candidate_routes[r][cr]))
        routes_hops.append(rl)
    return routes_hops
